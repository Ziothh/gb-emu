use super::Program;
use crate::hardware::{bus, cpu::CPU};

impl CPU {
    /// If the CPU reads this byte it should parse the next instructino from the prefixed opcode table.
    const PREFIX_INDICATION_BYTE: u8 = 0xCB;

    fn todo(&self) -> ! {
        todo!()
    }
    fn exec_unprefixed(&mut self, bus: &mut bus::Interface) -> &mut Self {
        let cycles = match self.read_pc_byte(bus) {
            // NOP
            // cycles: 4
            0x00 => self.nop(),
            // LD BC,n16
            // cycles: 12
            0x01 => self.todo(),
            // LD [BC],A
            // cycles: 8
            0x02 => self.todo(),
            // INC BC
            // cycles: 8
            0x03 => self.todo(),
            // INC B
            // cycles: 4
            0x04 => self.todo(),
            // DEC B
            // cycles: 4
            0x05 => self.todo(),
            // LD B,n8
            // cycles: 8
            0x06 => self.todo(),
            // RLCA
            // cycles: 4
            0x07 => self.todo(),
            // LD [a16],SP
            // cycles: 20
            0x08 => self.todo(),
            // ADD HL,BC
            // cycles: 8
            0x09 => self.todo(),
            // LD A,[BC]
            // cycles: 8
            0x0A => self.todo(),
            // DEC BC
            // cycles: 8
            0x0B => self.todo(),
            // INC C
            // cycles: 4
            0x0C => self.todo(),
            // DEC C
            // cycles: 4
            0x0D => self.todo(),
            // LD C,n8
            // cycles: 8
            0x0E => self.todo(),
            // RRCA
            // cycles: 4
            0x0F => self.todo(),
            // STOP n8
            // cycles: 4
            0x10 => self.todo(),
            // LD DE,n16
            // cycles: 12
            0x11 => self.todo(),
            // LD [DE],A
            // cycles: 8
            0x12 => self.todo(),
            // INC DE
            // cycles: 8
            0x13 => self.todo(),
            // INC D
            // cycles: 4
            0x14 => self.todo(),
            // DEC D
            // cycles: 4
            0x15 => self.todo(),
            // LD D,n8
            // cycles: 8
            0x16 => self.todo(),
            // RLA
            // cycles: 4
            0x17 => self.todo(),
            // JR e8
            // cycles: 12
            0x18 => self.todo(),
            // ADD HL,DE
            // cycles: 8
            0x19 => self.todo(),
            // LD A,[DE]
            // cycles: 8
            0x1A => self.todo(),
            // DEC DE
            // cycles: 8
            0x1B => self.todo(),
            // INC E
            // cycles: 4
            0x1C => self.todo(),
            // DEC E
            // cycles: 4
            0x1D => self.todo(),
            // LD E,n8
            // cycles: 8
            0x1E => self.todo(),
            // RRA
            // cycles: 4
            0x1F => self.todo(),
            // JR NZ,e8
            // cycles: 12,8
            0x20 => self.todo(),
            // LD HL,n16
            // cycles: 12
            0x21 => self.todo(),
            // LD [HL+],A
            // cycles: 8
            0x22 => self.todo(),
            // INC HL
            // cycles: 8
            0x23 => self.todo(),
            // INC H
            // cycles: 4
            0x24 => self.todo(),
            // DEC H
            // cycles: 4
            0x25 => self.todo(),
            // LD H,n8
            // cycles: 8
            0x26 => self.todo(),
            // DAA
            // cycles: 4
            0x27 => self.todo(),
            // JR Z,e8
            // cycles: 12,8
            0x28 => self.todo(),
            // ADD HL,HL
            // cycles: 8
            0x29 => self.todo(),
            // LD A,[HL+]
            // cycles: 8
            0x2A => self.todo(),
            // DEC HL
            // cycles: 8
            0x2B => self.todo(),
            // INC L
            // cycles: 4
            0x2C => self.todo(),
            // DEC L
            // cycles: 4
            0x2D => self.todo(),
            // LD L,n8
            // cycles: 8
            0x2E => self.todo(),
            // CPL
            // cycles: 4
            0x2F => self.todo(),
            // JR NC,e8
            // cycles: 12,8
            0x30 => self.todo(),
            // LD SP,n16
            // cycles: 12
            0x31 => self.todo(),
            // LD [HL-],A
            // cycles: 8
            0x32 => self.todo(),
            // INC SP
            // cycles: 8
            0x33 => self.todo(),
            // INC [HL]
            // cycles: 12
            0x34 => self.todo(),
            // DEC [HL]
            // cycles: 12
            0x35 => self.todo(),
            // LD [HL],n8
            // cycles: 12
            0x36 => self.todo(),
            // SCF
            // cycles: 4
            0x37 => self.todo(),
            // JR C,e8
            // cycles: 12,8
            0x38 => self.todo(),
            // ADD HL,SP
            // cycles: 8
            0x39 => self.todo(),
            // LD A,[HL-]
            // cycles: 8
            0x3A => self.todo(),
            // DEC SP
            // cycles: 8
            0x3B => self.todo(),
            // INC A
            // cycles: 4
            0x3C => self.todo(),
            // DEC A
            // cycles: 4
            0x3D => self.todo(),
            // LD A,n8
            // cycles: 8
            0x3E => self.todo(),
            // CCF
            // cycles: 4
            0x3F => self.todo(),
            // LD B,B
            // cycles: 4
            0x40 => self.todo(),
            // LD B,C
            // cycles: 4
            0x41 => self.todo(),
            // LD B,D
            // cycles: 4
            0x42 => self.todo(),
            // LD B,E
            // cycles: 4
            0x43 => self.todo(),
            // LD B,H
            // cycles: 4
            0x44 => self.todo(),
            // LD B,L
            // cycles: 4
            0x45 => self.todo(),
            // LD B,[HL]
            // cycles: 8
            0x46 => self.todo(),
            // LD B,A
            // cycles: 4
            0x47 => self.todo(),
            // LD C,B
            // cycles: 4
            0x48 => self.todo(),
            // LD C,C
            // cycles: 4
            0x49 => self.todo(),
            // LD C,D
            // cycles: 4
            0x4A => self.todo(),
            // LD C,E
            // cycles: 4
            0x4B => self.todo(),
            // LD C,H
            // cycles: 4
            0x4C => self.todo(),
            // LD C,L
            // cycles: 4
            0x4D => self.todo(),
            // LD C,[HL]
            // cycles: 8
            0x4E => self.todo(),
            // LD C,A
            // cycles: 4
            0x4F => self.todo(),
            // LD D,B
            // cycles: 4
            0x50 => self.todo(),
            // LD D,C
            // cycles: 4
            0x51 => self.todo(),
            // LD D,D
            // cycles: 4
            0x52 => self.todo(),
            // LD D,E
            // cycles: 4
            0x53 => self.todo(),
            // LD D,H
            // cycles: 4
            0x54 => self.todo(),
            // LD D,L
            // cycles: 4
            0x55 => self.todo(),
            // LD D,[HL]
            // cycles: 8
            0x56 => self.todo(),
            // LD D,A
            // cycles: 4
            0x57 => self.todo(),
            // LD E,B
            // cycles: 4
            0x58 => self.todo(),
            // LD E,C
            // cycles: 4
            0x59 => self.todo(),
            // LD E,D
            // cycles: 4
            0x5A => self.todo(),
            // LD E,E
            // cycles: 4
            0x5B => self.todo(),
            // LD E,H
            // cycles: 4
            0x5C => self.todo(),
            // LD E,L
            // cycles: 4
            0x5D => self.todo(),
            // LD E,[HL]
            // cycles: 8
            0x5E => self.todo(),
            // LD E,A
            // cycles: 4
            0x5F => self.todo(),
            // LD H,B
            // cycles: 4
            0x60 => self.todo(),
            // LD H,C
            // cycles: 4
            0x61 => self.todo(),
            // LD H,D
            // cycles: 4
            0x62 => self.todo(),
            // LD H,E
            // cycles: 4
            0x63 => self.todo(),
            // LD H,H
            // cycles: 4
            0x64 => self.todo(),
            // LD H,L
            // cycles: 4
            0x65 => self.todo(),
            // LD H,[HL]
            // cycles: 8
            0x66 => self.todo(),
            // LD H,A
            // cycles: 4
            0x67 => self.todo(),
            // LD L,B
            // cycles: 4
            0x68 => self.todo(),
            // LD L,C
            // cycles: 4
            0x69 => self.todo(),
            // LD L,D
            // cycles: 4
            0x6A => self.todo(),
            // LD L,E
            // cycles: 4
            0x6B => self.todo(),
            // LD L,H
            // cycles: 4
            0x6C => self.todo(),
            // LD L,L
            // cycles: 4
            0x6D => self.todo(),
            // LD L,[HL]
            // cycles: 8
            0x6E => self.todo(),
            // LD L,A
            // cycles: 4
            0x6F => self.todo(),
            // LD [HL],B
            // cycles: 8
            0x70 => self.todo(),
            // LD [HL],C
            // cycles: 8
            0x71 => self.todo(),
            // LD [HL],D
            // cycles: 8
            0x72 => self.todo(),
            // LD [HL],E
            // cycles: 8
            0x73 => self.todo(),
            // LD [HL],H
            // cycles: 8
            0x74 => self.todo(),
            // LD [HL],L
            // cycles: 8
            0x75 => self.todo(),
            // HALT
            // cycles: 4
            0x76 => self.todo(),
            // LD [HL],A
            // cycles: 8
            0x77 => self.todo(),
            // LD A,B
            // cycles: 4
            0x78 => self.todo(),
            // LD A,C
            // cycles: 4
            0x79 => self.todo(),
            // LD A,D
            // cycles: 4
            0x7A => self.todo(),
            // LD A,E
            // cycles: 4
            0x7B => self.todo(),
            // LD A,H
            // cycles: 4
            0x7C => self.todo(),
            // LD A,L
            // cycles: 4
            0x7D => self.todo(),
            // LD A,[HL]
            // cycles: 8
            0x7E => self.todo(),
            // LD A,A
            // cycles: 4
            0x7F => self.todo(),
            // ADD A,B
            // cycles: 4
            0x80 => self.todo(),
            // ADD A,C
            // cycles: 4
            0x81 => self.todo(),
            // ADD A,D
            // cycles: 4
            0x82 => self.todo(),
            // ADD A,E
            // cycles: 4
            0x83 => self.todo(),
            // ADD A,H
            // cycles: 4
            0x84 => self.todo(),
            // ADD A,L
            // cycles: 4
            0x85 => self.todo(),
            // ADD A,[HL]
            // cycles: 8
            0x86 => self.todo(),
            // ADD A,A
            // cycles: 4
            0x87 => self.todo(),
            // ADC A,B
            // cycles: 4
            0x88 => self.todo(),
            // ADC A,C
            // cycles: 4
            0x89 => self.todo(),
            // ADC A,D
            // cycles: 4
            0x8A => self.todo(),
            // ADC A,E
            // cycles: 4
            0x8B => self.todo(),
            // ADC A,H
            // cycles: 4
            0x8C => self.todo(),
            // ADC A,L
            // cycles: 4
            0x8D => self.todo(),
            // ADC A,[HL]
            // cycles: 8
            0x8E => self.todo(),
            // ADC A,A
            // cycles: 4
            0x8F => self.todo(),
            // SUB A,B
            // cycles: 4
            0x90 => self.todo(),
            // SUB A,C
            // cycles: 4
            0x91 => self.todo(),
            // SUB A,D
            // cycles: 4
            0x92 => self.todo(),
            // SUB A,E
            // cycles: 4
            0x93 => self.todo(),
            // SUB A,H
            // cycles: 4
            0x94 => self.todo(),
            // SUB A,L
            // cycles: 4
            0x95 => self.todo(),
            // SUB A,[HL]
            // cycles: 8
            0x96 => self.todo(),
            // SUB A,A
            // cycles: 4
            0x97 => self.todo(),
            // SBC A,B
            // cycles: 4
            0x98 => self.todo(),
            // SBC A,C
            // cycles: 4
            0x99 => self.todo(),
            // SBC A,D
            // cycles: 4
            0x9A => self.todo(),
            // SBC A,E
            // cycles: 4
            0x9B => self.todo(),
            // SBC A,H
            // cycles: 4
            0x9C => self.todo(),
            // SBC A,L
            // cycles: 4
            0x9D => self.todo(),
            // SBC A,[HL]
            // cycles: 8
            0x9E => self.todo(),
            // SBC A,A
            // cycles: 4
            0x9F => self.todo(),
            // AND A,B
            // cycles: 4
            0xA0 => self.todo(),
            // AND A,C
            // cycles: 4
            0xA1 => self.todo(),
            // AND A,D
            // cycles: 4
            0xA2 => self.todo(),
            // AND A,E
            // cycles: 4
            0xA3 => self.todo(),
            // AND A,H
            // cycles: 4
            0xA4 => self.todo(),
            // AND A,L
            // cycles: 4
            0xA5 => self.todo(),
            // AND A,[HL]
            // cycles: 8
            0xA6 => self.todo(),
            // AND A,A
            // cycles: 4
            0xA7 => self.todo(),
            // XOR A,B
            // cycles: 4
            0xA8 => self.todo(),
            // XOR A,C
            // cycles: 4
            0xA9 => self.todo(),
            // XOR A,D
            // cycles: 4
            0xAA => self.todo(),
            // XOR A,E
            // cycles: 4
            0xAB => self.todo(),
            // XOR A,H
            // cycles: 4
            0xAC => self.todo(),
            // XOR A,L
            // cycles: 4
            0xAD => self.todo(),
            // XOR A,[HL]
            // cycles: 8
            0xAE => self.todo(),
            // XOR A,A
            // cycles: 4
            0xAF => self.todo(),
            // OR A,B
            // cycles: 4
            0xB0 => self.todo(),
            // OR A,C
            // cycles: 4
            0xB1 => self.todo(),
            // OR A,D
            // cycles: 4
            0xB2 => self.todo(),
            // OR A,E
            // cycles: 4
            0xB3 => self.todo(),
            // OR A,H
            // cycles: 4
            0xB4 => self.todo(),
            // OR A,L
            // cycles: 4
            0xB5 => self.todo(),
            // OR A,[HL]
            // cycles: 8
            0xB6 => self.todo(),
            // OR A,A
            // cycles: 4
            0xB7 => self.todo(),
            // CP A,B
            // cycles: 4
            0xB8 => self.todo(),
            // CP A,C
            // cycles: 4
            0xB9 => self.todo(),
            // CP A,D
            // cycles: 4
            0xBA => self.todo(),
            // CP A,E
            // cycles: 4
            0xBB => self.todo(),
            // CP A,H
            // cycles: 4
            0xBC => self.todo(),
            // CP A,L
            // cycles: 4
            0xBD => self.todo(),
            // CP A,[HL]
            // cycles: 8
            0xBE => self.todo(),
            // CP A,A
            // cycles: 4
            0xBF => self.todo(),
            // RET NZ
            // cycles: 20,8
            0xC0 => self.todo(),
            // POP BC
            // cycles: 12
            0xC1 => self.todo(),
            // JP NZ,a16
            // cycles: 16,12
            0xC2 => self.todo(),
            // JP a16
            // cycles: 16
            0xC3 => self.todo(),
            // CALL NZ,a16
            // cycles: 24,12
            0xC4 => self.todo(),
            // PUSH BC
            // cycles: 16
            0xC5 => self.todo(),
            // ADD A,n8
            // cycles: 8
            0xC6 => self.todo(),
            // RST $00
            // cycles: 16
            0xC7 => self.todo(),
            // RET Z
            // cycles: 20,8
            0xC8 => self.todo(),
            // RET
            // cycles: 16
            0xC9 => self.todo(),
            // JP Z,a16
            // cycles: 16,12
            0xCA => self.todo(),
            // PREFIX
            // cycles: 4
            0xCB => self.prefixed = true,
            // CALL Z,a16
            // cycles: 24,12
            0xCC => self.todo(),
            // CALL a16
            // cycles: 24
            0xCD => self.todo(),
            // ADC A,n8
            // cycles: 8
            0xCE => self.todo(),
            // RST $08
            // cycles: 16
            0xCF => self.todo(),
            // RET NC
            // cycles: 20,8
            0xD0 => self.todo(),
            // POP DE
            // cycles: 12
            0xD1 => self.todo(),
            // JP NC,a16
            // cycles: 16,12
            0xD2 => self.todo(),
            // ILLEGAL_D3
            // cycles: 4
            0xD3 => self.todo(),
            // CALL NC,a16
            // cycles: 24,12
            0xD4 => self.todo(),
            // PUSH DE
            // cycles: 16
            0xD5 => self.todo(),
            // SUB A,n8
            // cycles: 8
            0xD6 => self.todo(),
            // RST $10
            // cycles: 16
            0xD7 => self.todo(),
            // RET C
            // cycles: 20,8
            0xD8 => self.todo(),
            // RETI
            // cycles: 16
            0xD9 => self.todo(),
            // JP C,a16
            // cycles: 16,12
            0xDA => self.todo(),
            // ILLEGAL_DB
            // cycles: 4
            0xDB => self.todo(),
            // CALL C,a16
            // cycles: 24,12
            0xDC => self.todo(),
            // ILLEGAL_DD
            // cycles: 4
            0xDD => self.todo(),
            // SBC A,n8
            // cycles: 8
            0xDE => self.todo(),
            // RST $18
            // cycles: 16
            0xDF => self.todo(),
            // LDH [a8],A
            // cycles: 12
            0xE0 => self.todo(),
            // POP HL
            // cycles: 12
            0xE1 => self.todo(),
            // LD [C],A
            // cycles: 8
            0xE2 => self.todo(),
            // ILLEGAL_E3
            // cycles: 4
            0xE3 => self.todo(),
            // ILLEGAL_E4
            // cycles: 4
            0xE4 => self.todo(),
            // PUSH HL
            // cycles: 16
            0xE5 => self.todo(),
            // AND A,n8
            // cycles: 8
            0xE6 => self.todo(),
            // RST $20
            // cycles: 16
            0xE7 => self.todo(),
            // ADD SP,e8
            // cycles: 16
            0xE8 => self.todo(),
            // JP HL
            // cycles: 4
            0xE9 => self.todo(),
            // LD [a16],A
            // cycles: 16
            0xEA => self.todo(),
            // ILLEGAL_EB
            // cycles: 4
            0xEB => self.todo(),
            // ILLEGAL_EC
            // cycles: 4
            0xEC => self.todo(),
            // ILLEGAL_ED
            // cycles: 4
            0xED => self.todo(),
            // XOR A,n8
            // cycles: 8
            0xEE => self.todo(),
            // RST $28
            // cycles: 16
            0xEF => self.todo(),
            // LDH A,[a8]
            // cycles: 12
            0xF0 => self.todo(),
            // POP AF
            // cycles: 12
            0xF1 => self.todo(),
            // LD A,[C]
            // cycles: 8
            0xF2 => self.todo(),
            // DI
            // cycles: 4
            0xF3 => self.todo(),
            // ILLEGAL_F4
            // cycles: 4
            0xF4 => self.todo(),
            // PUSH AF
            // cycles: 16
            0xF5 => self.todo(),
            // OR A,n8
            // cycles: 8
            0xF6 => self.todo(),
            // RST $30
            // cycles: 16
            0xF7 => self.todo(),
            // LD HL,SP+e8
            // cycles: 12
            0xF8 => self.todo(),
            // LD SP,HL
            // cycles: 8
            0xF9 => self.todo(),
            // LD A,[a16]
            // cycles: 16
            0xFA => self.todo(),
            // EI
            // cycles: 4
            0xFB => self.todo(),
            // ILLEGAL_FC
            // cycles: 4
            0xFC => self.todo(),
            // ILLEGAL_FD
            // cycles: 4
            0xFD => self.todo(),
            // CP A,n8
            // cycles: 8
            0xFE => self.todo(),
            // RST $38
            // cycles: 16
            0xFF => self.todo(),
        };

        return self;
    }
}
